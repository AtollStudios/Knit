"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[428],{30132:function(e){e.exports=JSON.parse('{"functions":[{"name":"CreateController","desc":"Creates a new controller.","params":[{"name":"controllerDefinition","desc":"","lua_type":"ControllerDef"}],"returns":[{"desc":"","lua_type":"Controller"}],"function_type":"static","source":{"line":127,"path":"src/KnitClient.lua"}},{"name":"AddControllers","desc":"Requires all the modules that are children of the given parent. This is an easy\\nway to quickly load all controllers that might be in a folder.\\n```lua\\nKnit.AddControllers(somewhere.Controllers)\\n```","params":[{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"controllers: {Controller}"}],"function_type":"static","source":{"line":147,"path":"src/KnitClient.lua"}},{"name":"AddControllersDeep","desc":"Requires all the modules that are descendants of the given parent.","params":[{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"controllers: {Controller}"}],"function_type":"static","source":{"line":162,"path":"src/KnitClient.lua"}},{"name":"GetService","desc":"Returns a Service object which is a reflection of the remote objects\\nwithin the Client table of the given service. Returns `nil` if the\\nservice is not found.\\n\\n:::caution\\nServices are only exposed to the client if the service has remote-based\\ncontent in the Client table. If not, the service will not be visible\\nto the client. `KnitClient.GetService` will only work on services that\\nexpose remote-based content on their Client tables.\\n:::","params":[{"name":"serviceName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Service?"}],"function_type":"static","source":{"line":186,"path":"src/KnitClient.lua"}},{"name":"GetController","desc":"Gets the controller by name. Throws an error if the controller\\nis not found.","params":[{"name":"controllerName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Controller?"}],"function_type":"static","source":{"line":200,"path":"src/KnitClient.lua"}},{"name":"Start","desc":"Starts Knit. Should only be called once per client.\\n```lua\\nKnit.Start():andThen(function()\\n\\tprint(\\"Knit started!\\")\\nend):catch(warn)\\n```\\n\\nBy default, service methods exposed to the client will return promises.\\nTo change this behavior, set the `ServicePromises` option to `false`:\\n```lua\\nKnit.Start({ServicePromises = false}):andThen(function()\\n\\tprint(\\"Knit started!\\")\\nend):catch(warn)\\n```","params":[{"name":"options","desc":"","lua_type":"KnitOptions?"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":226,"path":"src/KnitClient.lua"}},{"name":"OnStart","desc":"Returns a promise that is resolved once Knit has started. This is useful\\nfor any code that needs to tie into Knit controllers but is not the script\\nthat called `Start`.\\n```lua\\nKnit.OnStart():andThen(function()\\n\\tlocal MyController = Knit.GetController(\\"MyController\\")\\n\\tMyController:DoSomething()\\nend):catch(warn)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":289,"path":"src/KnitClient.lua"}}],"properties":[{"name":"Player","desc":"Reference to the LocalPlayer.","lua_type":"Player","readonly":true,"source":{"line":75,"path":"src/KnitClient.lua"}},{"name":"Util","desc":"References the Util folder. Should only be accessed when using Knit as\\na standalone module. If using Knit from Wally, modules should just be\\npulled in via Wally instead of relying on Knit\'s Util folder, as this\\nfolder only contains what is necessary for Knit to run in Wally mode.","lua_type":"Folder","readonly":true,"source":{"line":86,"path":"src/KnitClient.lua"}}],"types":[{"name":"ControllerDef","desc":"","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":20,"path":"src/KnitClient.lua"}},{"name":"Controller","desc":"","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":31,"path":"src/KnitClient.lua"}},{"name":"Service","desc":"","fields":[{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":41,"path":"src/KnitClient.lua"}},{"name":"KnitOptions","desc":"`ServicePromises` defaults to `true` and indicates if service methods use promises.","fields":[{"name":"ServicePromises","lua_type":"boolean","desc":"Defaults to `true`"}],"source":{"line":52,"path":"src/KnitClient.lua"}}],"name":"KnitClient","desc":"","realm":["Client"],"source":{"line":67,"path":"src/KnitClient.lua"}}')}}]);