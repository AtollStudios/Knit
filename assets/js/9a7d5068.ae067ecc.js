"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[428],{30132:function(e){e.exports=JSON.parse('{"functions":[{"name":"CreateController","desc":"Creates a new controller.","params":[{"name":"controllerDefinition","desc":"","lua_type":"ControllerDef"}],"returns":[{"desc":"","lua_type":"Controller"}],"function_type":"static","source":{"line":109,"path":"src/KnitClient.lua"}},{"name":"AddControllers","desc":"Requires all the modules that are children of the given parent. This is an easy\\nway to quickly load all controllers that might be in a folder.\\n```lua\\nKnit.AddControllers(somewhere.Controllers)\\n```","params":[{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"controllers: {Controller}"}],"function_type":"static","source":{"line":129,"path":"src/KnitClient.lua"}},{"name":"AddControllersDeep","desc":"Requires all the modules that are descendants of the given parent.","params":[{"name":"parent","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"controllers: {Controller}"}],"function_type":"static","source":{"line":144,"path":"src/KnitClient.lua"}},{"name":"GetService","desc":"Returns a Service object which is a reflection of the remote objects\\nwithin the Client table of the given service. Returns `nil` if the\\nservice is not found.\\n\\n:::caution\\nServices are only exposed to the client if the service has remote-based\\ncontent in the Client table. If not, the service will not be visible\\nto the client. `KnitClient.GetService` will only work on services that\\nexpose remote-based content on their Client tables.\\n:::","params":[{"name":"serviceName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Service?"}],"function_type":"static","source":{"line":168,"path":"src/KnitClient.lua"}},{"name":"GetController","desc":"Gets the controller by name. Returns `nil` if not found. This is just\\nan alias for `KnitControllers.Controllers[controllerName]`.","params":[{"name":"controllerName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Controller?"}],"function_type":"static","source":{"line":182,"path":"src/KnitClient.lua"}},{"name":"Start","desc":"Starts Knit. Should only be called once per client.\\n```lua\\nKnit.Start():andThen(function()\\n\\tprint(\\"Knit started!\\")\\nend):catch(warn)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":196,"path":"src/KnitClient.lua"}},{"name":"OnStart","desc":"Returns a promise that is resolved once Knit has started. This is useful\\nfor any code that needs to tie into Knit controllers but is not the script\\nthat called `Start`.\\n```lua\\nKnit.OnStart():andThen(function()\\n\\tlocal MyController = Knit.Controllers.MyController\\n\\tMyController:DoSomething()\\nend):catch(warn)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":254,"path":"src/KnitClient.lua"}}],"properties":[{"name":"Player","desc":"Reference to the LocalPlayer","lua_type":"Player","source":{"line":57,"path":"src/KnitClient.lua"}},{"name":"Controllers","desc":"","lua_type":"{[string]: Controller}","source":{"line":63,"path":"src/KnitClient.lua"}},{"name":"Util","desc":"","lua_type":"Folder","source":{"line":69,"path":"src/KnitClient.lua"}}],"types":[{"name":"ControllerDef","desc":"","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":20,"path":"src/KnitClient.lua"}},{"name":"Controller","desc":"","fields":[{"name":"Name","lua_type":"string","desc":""},{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":31,"path":"src/KnitClient.lua"}},{"name":"Service","desc":"","fields":[{"name":"[any]","lua_type":"any","desc":""}],"source":{"line":41,"path":"src/KnitClient.lua"}}],"name":"KnitClient","desc":"","realm":["Client"],"source":{"line":50,"path":"src/KnitClient.lua"}}')}}]);